// Generated by CoffeeScript 1.7.1
(function() {
  var FI, TEXT, TRM, TYPES, alert, assert, badge, data, debug, echo, help, info, log, rpr, template, warn, whisper;

  TYPES = require('coffeenode-types');

  TEXT = require('coffeenode-text');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'FI/tests';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  echo = TRM.echo.bind(TRM);

  assert = require('assert');

  FI = require('./main');

  this.test_argument_retrieval = function() {
    var data, expected, handler, matcher, parameters, probes, result, _i, _len, _ref, _results;
    handler = function() {};
    data = {
      'foo': 'bar'
    };
    matcher = /.*/;
    probes = [[[data], [data, FI.default_matcher]], [[data, matcher], [data, matcher]]];
    assert.notEqual(FI.default_matcher, void 0);
    _results = [];
    for (_i = 0, _len = probes.length; _i < _len; _i++) {
      _ref = probes[_i], parameters = _ref[0], expected = _ref[1];
      result = FI._get_data_and_matcher.apply(FI, parameters);
      _results.push(assert.deepEqual(result, expected));
    }
    return _results;
  };

  this.test_standard_syntax_1 = function() {
    var data, expected, result, template, templates_and_expectations, _i, _len, _ref, _results;
    templates_and_expectations = [['helo name', 'helo name'], ['$name', 'Jim'], ['helo ${name}', 'helo Jim'], ['helo ${name} \\$ {n2}...', 'helo Jim $ {n2}...'], ['helo \\\\${name}', 'helo \\Jim'], ['helo \\$name', 'helo $name'], ['helo \\${name}', 'helo ${name}'], ['helo ${{name}}', 'helo ${{name}}'], ['helo $name!', 'helo Jim!'], ['helo +name!', 'helo +name!'], ['helo !+name!', 'helo !+name!']];
    data = {
      'name': 'Jim'
    };
    _results = [];
    for (_i = 0, _len = templates_and_expectations.length; _i < _len; _i++) {
      _ref = templates_and_expectations[_i], template = _ref[0], expected = _ref[1];
      result = FI.fill_in(template, data);
      log(TRM.green('test_standard_syntax_1'), TRM.grey(template), TRM.gold(result));
      _results.push(assert.equal(result, expected));
    }
    return _results;
  };

  this.test_data_lists = function() {
    var data, expected, result, template, templates_and_expectations, _i, _len, _ref, _results;
    templates_and_expectations = [['$name was captain on $0, $1, and $2', 'James T. Kirk was captain on NCC-1701, NCC-1701-A, and NCC-1701-B']];
    data = ['NCC-1701', 'NCC-1701-A', 'NCC-1701-B'];
    data['name'] = 'James T. Kirk';
    _results = [];
    for (_i = 0, _len = templates_and_expectations.length; _i < _len; _i++) {
      _ref = templates_and_expectations[_i], template = _ref[0], expected = _ref[1];
      result = FI.fill_in(template, data);
      log(TRM.green('test_data_lists'), TRM.grey(template), TRM.gold(result));
      _results.push(assert.equal(result, expected));
    }
    return _results;
  };

  this.test_resolution_order = function() {
    var data, expected, has_matched, matcher, result, template, templates_and_expectations, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _results;
    templates_and_expectations = [['$name was captain on $0, $1, and $2', 'James T. Kirk was captain on NCC-1701, NCC-1701-A, and NCC-1701-B']];
    data = ['NCC-1701', 'NCC-1701-A', 'NCC-1701-B'];
    data['name'] = 'James T. Kirk';
    matcher = FI.default_matcher;
    _results = [];
    for (_i = 0, _len = templates_and_expectations.length; _i < _len; _i++) {
      _ref = templates_and_expectations[_i], template = _ref[0], expected = _ref[1];
      result = template;
      _ref1 = FI._fill_in_template_once(result, data, matcher), has_matched = _ref1[0], result = _ref1[1];
      log(TRM.green('test_data_lists'), TRM.gold(result));
      assert.deepEqual([has_matched, result], [true, '$name was captain on $0, $1, and NCC-1701-B']);
      _ref2 = FI._fill_in_template_once(result, data, matcher), has_matched = _ref2[0], result = _ref2[1];
      log(TRM.green('test_data_lists'), TRM.gold(result));
      assert.deepEqual([has_matched, result], [true, '$name was captain on $0, NCC-1701-A, and NCC-1701-B']);
      _ref3 = FI._fill_in_template_once(result, data, matcher), has_matched = _ref3[0], result = _ref3[1];
      log(TRM.green('test_data_lists'), TRM.gold(result));
      assert.deepEqual([has_matched, result], [true, '$name was captain on NCC-1701, NCC-1701-A, and NCC-1701-B']);
      _ref4 = FI._fill_in_template_once(result, data, matcher), has_matched = _ref4[0], result = _ref4[1];
      log(TRM.green('test_data_lists'), TRM.gold(result));
      assert.deepEqual([has_matched, result], [true, 'James T. Kirk was captain on NCC-1701, NCC-1701-A, and NCC-1701-B']);
      _ref5 = FI._fill_in_template_once(result, data, matcher), has_matched = _ref5[0], result = _ref5[1];
      log(TRM.green('test_data_lists'), TRM.gold(result));
      _results.push(assert.deepEqual([has_matched, result], [false, 'James T. Kirk was captain on NCC-1701, NCC-1701-A, and NCC-1701-B']));
    }
    return _results;
  };

  this.test_recursive_expansions = function() {
    var data, expected, matcher, result_1, result_2, template, templates_and_expectations, _i, _len, _ref, _results;
    templates_and_expectations = [['i have 2 apples', 'i have 2 apples'], ['i have $two apples', 'i have 2 apples'], ['i have $some apples', 'i have 2 apples'], ['i have ${more} apples', 'i have 3 apples'], ['i have ${/more} apples', 'i have 3 apples']];
    data = {
      'some': '$two',
      'more': '$three',
      'two': '2',
      'three': '3'
    };
    matcher = FI.default_matcher;
    _results = [];
    for (_i = 0, _len = templates_and_expectations.length; _i < _len; _i++) {
      _ref = templates_and_expectations[_i], template = _ref[0], expected = _ref[1];
      result_1 = FI.fill_in_template(template, data, matcher);
      result_2 = FI.fill_in_template(template, data);
      assert.equal(result_1, result_2);
      _results.push(assert.equal(result_1, expected));
    }
    return _results;
  };

  this.test_cycle_detection = function() {
    var data, error, expected, template, templates_and_expectations, _i, _len, _ref, _results;
    templates_and_expectations = [['i have $count apples', 'i have 2 apples']];
    data = {
      'count': '$some',
      'some': '$more',
      'more': '$three',
      'three': '$some'
    };
    _results = [];
    for (_i = 0, _len = templates_and_expectations.length; _i < _len; _i++) {
      _ref = templates_and_expectations[_i], template = _ref[0], expected = _ref[1];
      try {
        FI.fill_in_template(template, data);
      } catch (_error) {
        error = _error;
        warn(error['message']);
      }
      _results.push(assert.throws((function() {
        return FI.fill_in_template(template, data);
      }), /detected circular references/));
    }
    return _results;
  };

  this.test_multiple_interpolations = function() {
    var data, expected, result, template, templates_and_expectations, _i, _len, _ref, _results;
    templates_and_expectations = [['i have $count apples', 'i have 2 apples']];
    data = {
      'count': '${/amounts/some}',
      'amounts': {
        'some': '2',
        'more': '3'
      }
    };
    _results = [];
    for (_i = 0, _len = templates_and_expectations.length; _i < _len; _i++) {
      _ref = templates_and_expectations[_i], template = _ref[0], expected = _ref[1];
      result = FI.fill_in_template(template, data);
      log(TRM.green('test_multiple_interpolations'), TRM.grey(template), TRM.gold(result));
      _results.push(assert.equal(result, expected));
    }
    return _results;
  };

  this.test_nested_keys = function() {
    var data, expected, result, template, templates_and_expectations, _i, _len, _ref, _results;
    templates_and_expectations = [['i have ${/amounts/$count} apples', 'i have 2 apples']];
    data = {
      'count': 'some',
      'amounts': {
        'some': '2',
        'more': '3'
      }
    };
    _results = [];
    for (_i = 0, _len = templates_and_expectations.length; _i < _len; _i++) {
      _ref = templates_and_expectations[_i], template = _ref[0], expected = _ref[1];
      result = FI.fill_in_template(template, data);
      log(TRM.green('test_nested_keys'), TRM.grey(template), TRM.gold(result));
      _results.push(assert.equal(result, expected));
    }
    return _results;
  };

  this.test_custom_syntax_1 = function() {
    var data, expected, matcher, result, template, templates_and_expectations, _i, _len, _ref, _results;
    templates_and_expectations = [['helo name', 'helo name'], ['helo ${name}', 'helo ${name}'], ['helo \\$name', 'helo \\$name'], ['helo \\${name}', 'helo \\${name}'], ['helo ${{name}}', 'helo ${{name}}'], ['helo $name!', 'helo $name!'], ['helo +name!', 'helo Jim!'], ['helo !+name!', 'helo +name!'], ['helo !!+name!', 'helo !Jim!'], ['helo +(name)!', 'helo Jim!']];
    data = {
      'name': 'Jim'
    };
    matcher = FI.new_matcher({
      activator: '+',
      opener: '(',
      closer: ')',
      escaper: '!'
    });
    _results = [];
    for (_i = 0, _len = templates_and_expectations.length; _i < _len; _i++) {
      _ref = templates_and_expectations[_i], template = _ref[0], expected = _ref[1];
      result = FI.fill_in(template, data, matcher);
      log(TRM.green('test_custom_syntax_1'), TRM.grey(template), TRM.gold(result));
      _results.push(assert.equal(result, expected));
    }
    return _results;
  };

  this.test_walk_containers_crumbs_and_values = function() {
    var d, result;
    d = {
      meaningless: [
        42, 43, {
          foo: 1,
          bar: 2,
          nested: ['a', 'b']
        }, 45
      ],
      deep: {
        down: {
          "in": {
            a: {
              drawer: 'a pen',
              cupboard: 'a pot',
              box: 'a pill'
            }
          }
        }
      }
    };
    result = [];
    FI.walk_containers_crumbs_and_values(d, function(error, container, crumbs, value) {
      var crumb;
      if (error != null) {
        throw error;
      }
      if (crumbs === null) {
        return;
      }
      return result.push({
        container: container,
        crumbs: (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = crumbs.length; _i < _len; _i++) {
            crumb = crumbs[_i];
            _results.push(crumb);
          }
          return _results;
        })(),
        value: value
      });
    });
    return assert.deepEqual(result, [
      {
        "container": [
          42, 43, {
            "foo": 1,
            "bar": 2,
            "nested": ["a", "b"]
          }, 45
        ],
        "crumbs": ["meaningless", 0],
        "value": 42
      }, {
        "container": [
          42, 43, {
            "foo": 1,
            "bar": 2,
            "nested": ["a", "b"]
          }, 45
        ],
        "crumbs": ["meaningless", 1],
        "value": 43
      }, {
        "container": {
          "foo": 1,
          "bar": 2,
          "nested": ["a", "b"]
        },
        "crumbs": ["meaningless", 2, "foo"],
        "value": 1
      }, {
        "container": {
          "foo": 1,
          "bar": 2,
          "nested": ["a", "b"]
        },
        "crumbs": ["meaningless", 2, "bar"],
        "value": 2
      }, {
        "container": ["a", "b"],
        "crumbs": ["meaningless", 2, "nested", 0],
        "value": "a"
      }, {
        "container": ["a", "b"],
        "crumbs": ["meaningless", 2, "nested", 1],
        "value": "b"
      }, {
        "container": [
          42, 43, {
            "foo": 1,
            "bar": 2,
            "nested": ["a", "b"]
          }, 45
        ],
        "crumbs": ["meaningless", 3],
        "value": 45
      }, {
        "container": {
          "drawer": "a pen",
          "cupboard": "a pot",
          "box": "a pill"
        },
        "crumbs": ["deep", "down", "in", "a", "drawer"],
        "value": "a pen"
      }, {
        "container": {
          "drawer": "a pen",
          "cupboard": "a pot",
          "box": "a pill"
        },
        "crumbs": ["deep", "down", "in", "a", "cupboard"],
        "value": "a pot"
      }, {
        "container": {
          "drawer": "a pen",
          "cupboard": "a pot",
          "box": "a pill"
        },
        "crumbs": ["deep", "down", "in", "a", "box"],
        "value": "a pill"
      }
    ]);
  };

  this.test_fill_in_container_1 = function() {
    var d;
    d = {
      ping1: '${/ping4}',
      ping2: '${/ping3}',
      ping3: '${/ping2}',
      ping4: '${/ping1}',
      pong: '${/ping1}'
    };
    return assert.throws((function() {
      return FI.fill_in(d);
    }), /detected circular references/);
  };

  this.test_routes = function() {
    var data, template;
    template = "i have a ${/deep/down/in/a/drawer}.";
    data = {
      deep: {
        down: {
          "in": {
            a: {
              drawer: 'pen',
              cupboard: 'pot',
              box: 'pill'
            }
          }
        }
      }
    };
    return debug(JSON.stringify(FI.fill_in(template, data)));
  };

  this.test_fill_in_container_2 = function() {
    var d;
    d = {
      meaningless: [
        42, 43, {
          foo: 1,
          bar: 2,
          nested: ['a', 'b']
        }, 45
      ],
      deep: {
        down: {
          "in": {
            a: {
              drawer: '${/my-things/pen}',
              cupboard: '${/my-things/pot}',
              box: '${${locations/for-things}/variable}'
            }
          }
        }
      },
      'my-things': {
        pen: 'a pen',
        pot: 'a pot',
        pill: 'a pill',
        variable: '${/my-things/pill}'
      },
      locations: {
        'for-things': '/my-things'
      }
    };
    return assert.deepEqual(FI.fill_in(d), {
      "meaningless": [
        42, 43, {
          "foo": 1,
          "bar": 2,
          "nested": ["a", "b"]
        }, 45
      ],
      "deep": {
        "down": {
          "in": {
            "a": {
              "drawer": "a pen",
              "cupboard": "a pot",
              "box": "a pill"
            }
          }
        }
      },
      "my-things": {
        "pen": "a pen",
        "pot": "a pot",
        "pill": "a pill",
        "variable": "a pill"
      },
      "locations": {
        "for-things": "/my-things"
      }
    });
  };

  this.test_fill_in_list_1 = function() {
    var data, template;
    template = ['${/protocol}', '://', '${/host}', ':', '${/port}'];
    data = {
      'protocol': 'http',
      'host': 'example.com',
      'port': '8080'
    };
    return debug(JSON.stringify(FI.fill_in_container(template, data)));
  };

  this.test_fill_in_list_2 = function() {
    var data, template;
    template = ['$protocol', '://', '$host', ':', '$port'];
    data = {
      'protocol': 'http',
      'host': 'example.com',
      'port': '8080'
    };
    return debug(JSON.stringify(FI.fill_in_container(template, data)));
  };

  this._test_fill_in_container_3 = function() {
    var d;
    d = {
      foo: {
        bar: 'baz',
        gnu: '${bar}'
      }
    };
    return assert.deepEqual(FI.fill_in(d), {
      "foo": {
        "bar": "baz",
        "gnu": "baz"
      }
    });
  };

  this.test_fill_in_container_4 = function() {
    var d;
    d = {
      translations: {
        'dutch': {
          'full': ['maandag', 'dinsdag'],
          'abbreviated': ['ma', 'di']
        },
        'english': {
          'full': ['Monday', 'Tuesday'],
          'abbreviated': ['Mo', 'Tu']
        }
      },
      language: 'dutch',
      days: '${/translations/$language/abbreviated}',
      day: '${/translations/$language/full/1}'
    };
    debug(JSON.stringify(FI.fill_in(d)));
    return assert.deepEqual(FI.fill_in(d), {
      "translations": {
        "dutch": {
          "full": ["maandag", "dinsdag"],
          "abbreviated": ["ma", "di"]
        },
        "english": {
          "full": ["Monday", "Tuesday"],
          "abbreviated": ["Mo", "Tu"]
        }
      },
      "language": "dutch",
      "days": ["ma", "di"],
      "day": "dinsdag"
    });
  };

  this.main = function() {
    var method_name, _results;
    _results = [];
    for (method_name in this) {
      if (method_name === 'main') {
        continue;
      }
      if (method_name[0] === '_') {
        continue;
      }
      warn(method_name);
      _results.push(this[method_name].apply(this));
    }
    return _results;
  };

  debug(FI.default_matcher);

  template = 'i have $count apples';

  data = {
    'count': '${/amounts/some}',
    'amounts': {
      'some': '${/amounts/more}',
      'more': '${/amounts/three}',
      'three': '${/amounts/some}'
    }
  };

  FI.fill_in(template, data);

}).call(this);
